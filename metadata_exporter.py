import json
from xml.etree.ElementTree import Element, SubElement, tostring
import xml.dom.minidom
from datetime import datetime
from tools.env import InitEnv


def generate_comic_info(json_data):
    # 创建根元素
    comic_info = Element('ComicInfo')
    comic_info.set('xmlns:xsd', 'http://www.w3.org/2001/XMLSchema')
    comic_info.set('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance')

    # 获取标题
    title = json_data['metadata']['title']

    # Title字段
    title_elem = SubElement(comic_info, 'Title')
    title_elem.text = title

    # Notes字段（使用文件最后修改时间）
    notes_elem = SubElement(comic_info, 'Notes')
    file_modified = datetime.strptime(
        json_data['fileLastModified'], '%Y-%m-%dT%H:%M:%SZ')
    notes_elem.text = f'Generated by BangumiKomga on {file_modified.isoformat()}'

    # 日期处理
    if json_data['metadata']['releaseDate']:
        release_date = datetime.strptime(
            json_data['metadata']['releaseDate'], '%Y-%m-%d')
        year_elem = SubElement(comic_info, 'Year')
        year_elem.text = str(release_date.year)

        month_elem = SubElement(comic_info, 'Month')
        month_elem.text = str(release_date.month)

        day_elem = SubElement(comic_info, 'Day')
        day_elem.text = str(release_date.day)

    # 作者信息
    # TODO: 将所有作者信息填入
    if json_data['metadata']['authors']:
        writer_elem = SubElement(comic_info, 'Writer')
        writer_elem.text = json_data['metadata']['authors'][0]['name']

    # 标签处理
    if json_data['metadata']['tags']:
        tags_elem = SubElement(comic_info, 'Tags')
        tags_elem.text = ','.join(json_data['metadata']['tags'])

    # 网络链接
    # TODO: 将所有链接填入
    if json_data['metadata']['links']:
        web_elem = SubElement(comic_info, 'Web')
        web_elem.text = json_data['metadata']['links'][0]['url']

    # 页数统计
    page_count_elem = SubElement(comic_info, 'PageCount')
    page_count_elem.text = str(json_data['media']['pagesCount'])

    # 语言设置
    # TODO: 根据文件名判断
    language_elem = SubElement(comic_info, 'LanguageISO')
    language_elem.text = 'zh'

    # 格式设置
    format_elem = SubElement(comic_info, 'Format')
    format_elem.text = 'Digital'

    # 漫画方向
    manga_elem = SubElement(comic_info, 'Manga')
    manga_elem.text = 'Yes'

    # 页面信息
    pages_elem = SubElement(comic_info, 'Pages')
    for i in range(1, json_data['media']['pagesCount'] + 1):
        page_elem = SubElement(pages_elem, 'Page')
        page_elem.set('Image', str(i))
        # FIXME: 尚无手段获取每页的具体尺寸
        # page_elem.set('ImageWidth', '1280')
        # page_elem.set('ImageHeight', '904')

    return comic_info


def prettify_comic_info(elem):
    """调整XML元素格式"""
    rough_string = tostring(elem, 'utf-8')
    reparsed = xml.dom.minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")


def generate_eze_info(json_data):
    """
    将Komga的JSON转换为eze info.json格式
    """
    # 解析创建日期
    release_date = datetime.strptime(
        json_data['metadata']['releaseDate'], '%Y-%m-%d')

    # 提取链接信息
    links = json_data['metadata'].get('links', [])

    # 构建tags对象
    tags = {
        "tag": json_data['metadata'].get('tags', []),
        # FIXME: 假设固定值, 也许需要从文件名或其他字段确定原本的语言
        "language": [],
        # 假设固定值，可根据需要修改
        "category": ["manga"],
        "artist": [author['name'] for author in json_data['metadata']['authors']],
        "group": []  # komga似乎没有该字段, 也许该填Publisher? 或是删去
    }

    # 添加翻译状态
    # FIXME: 只是关注了 translated 字样, 也许需要从文件名或其他字段确定是否已经翻译
    if "translated" not in tags["tag"]:
        tags["tag"].append("translated")

    # 上传日期取元数据中的发布日期
    upload_date = [
        release_date.year,
        release_date.month,
        release_date.day,
    ]

    # 构建最终JSON结构
    return {
        "gallery_info": {
            "title": json_data['metadata']['title'],
            "title_original": json_data['name'],
            "link": links,
            "category": "manga",
            "tags": tags,
            "language": "chinese",  # 假设固定值中文
            "translated": True,
            "upload_date": upload_date,
            "source": {
                # FIXME: 尚未实现
            }
        }
    }


def generate_mylar_info(json_data):
    """
    将Komga的JSON转换为完整的series.json格式
    """

    # 提取基础信息
    metadata = json_data.get("metadata", {})
    books_metadata = json_data.get("booksMetadata", {})

    # 系列标题
    series_title = metadata.get("title") or json_data.get("name", "")

    # 出版商
    publisher = metadata.get("publisher") or ""

    # 年份
    # TODO: Bangumi 的作品年份和发布日期均以 tag 的形式写入 series, 需要对 tags 进行精细化分离后才能着手提取保存
    year = 1800  # 默认值
    # release_date = books_metadata.get(
    #     "releaseDate") or metadata.get("releaseDate")
    # if release_date and len(release_date) >= 4 and release_date[:4].isdigit():
    #     year = int(release_date[:4])
    # elif metadata.get("year"):
    #     year = int(metadata.get("year"))

    # 简介 - 多源获取
    description = (metadata.get("summary") or
                   books_metadata.get("summary") or
                   metadata.get("description") or
                   "")

    # 状态映射
    komga_status = (metadata.get("status") or "").upper()
    mylar_status = {
        "ONGOING": "Continuing",
        "HIATUS": "Continuing",
        "ABANDONED": "Continuing",
        "ENDED": "Ended"
    }.get(komga_status, "Continuing")

    # 书籍总数
    total_issues = int(json_data.get("booksCount"))

    # 年龄评级标准化
    # 来自 https://github.com/dyphire/KomgaMylar/blob/cec6caa3607b1937c395aab47051260a56a9adfc/komga-mylar.py#L170
    def normalize_age_rating(value):
        if value is None:
            return None
        if isinstance(value, str):
            value = value.strip().lower()
            if value.isdigit():
                value = int(value)
            else:
                return None
        if value <= 0:
            return "All"
        elif value < 12:
            return "9+"
        elif value < 15:
            return "12+"
        elif value < 17:
            return "15+"
        elif value < 18:
            return "17+"
        else:
            return "Adult"

    age_rating = normalize_age_rating(metadata.get("ageRating"))

    # 标准化 booktype
    raw_booktype = (metadata.get("bookType") or "").strip().lower()
    normalized_booktype = "Print"  # 默认值
    if "trade" in raw_booktype or "tpb" in raw_booktype:
        normalized_booktype = "TPB"
    elif "graphic" in raw_booktype:
        normalized_booktype = "GN"
    elif "hardcover" in raw_booktype or "hc" in raw_booktype:
        normalized_booktype = "HC"
    elif "magazine" in raw_booktype:
        normalized_booktype = "Magazine"
    elif "digital" in raw_booktype:
        normalized_booktype = "Digital"

    # 判断是否是合订本, 如果有 collects 或者 booktype 则是 TPB/GN
    collects = metadata.get("collects")
    if collects is None and normalized_booktype in ["TPB", "GN", "HC"]:
        # 如果是 TPB/GN 但没有 collects，则设为空数组
        collects = []

    # 如果有 collects，则强制设为 TPB
    if collects:
        normalized_booktype = "TPB"

    # 构建最终输出
    return {
        "version": "1.0.2",
        "metadata": {
            "type": "comicSeries",
            "publisher": publisher,
            # 出版社的 副牌(imprint) 字段
            "imprint": metadata.get("imprint"),
            "name": series_title,
            # 此处使用了 Koamge series ID
            # 而非 https://github.com/mylar3/mylar3/wiki/series.json-schema-%28version-1.0.2%29
            # 中的 ComicVine comicid
            "comicid": json_data.get("id"),
            "year": year,
            "description_text": description.strip(),
            "description_formatted": None,
            # TODO: 暂未使用, 主要关注 total_issues 字段
            "volume": metadata.get("volume"),
            # 系列的目录位置
            # "url": json_data.get("url"),
            "booktype": normalized_booktype,
            "age_rating": age_rating,
            "collects": collects,
            # 此处省略了 Base URL
            "comic_image": f'/api/v1/series/{json_data.get("id")}/thumbnail',
            "total_issues": total_issues,
            "publication_run": metadata.get("publicationRun") or "",
            "status": mylar_status,
            "language": metadata.get("language"),
            "readingDirection": metadata.get("readingDirection"),
            # TODO: 暂以 year 占位
            "releaseDate": year,
            # TODO: 唉, 作者字段老毛病了
            "authors": books_metadata.get("authors") or metadata.get("authors"),
            "links": metadata.get("links"),
            "alternateTitles": metadata.get("alternateTitles"),
            "genres": metadata.get("genres"),
            "tags": (
                metadata.get("tags") or
                books_metadata.get("tags") or
                json_data.get("tags")
            ),
        }
    }


# TODO: 多本书籍可能需要临时重命名该元数据文件
def save_comic_info_to_file(json_input):
    comic_xml = generate_comic_info(json_input)
    # 格式化输出
    xml_str = prettify_comic_info(comic_xml)
    # 保存到文件 ComicInfo.xml
    with open('ComicInfo.xml', 'w', encoding='utf-8') as f:
        f.write(xml_str)
    # 输出提示
    print(f"书籍 {json_input['id']} 的 ComicInfo.xml 已成功保存")

# TODO: 多本书籍可能需要临时重命名该元数据文件


def save_eze_info_to_file(json_input):
    info_json = generate_eze_info(json_input)
    # 保存到文件 info.json
    with open('info.json', 'w', encoding='utf-8') as f:
        f.write(json.dumps(info_json, ensure_ascii=False))
    # 输出提示
    print(f"书籍 {json_input['id']} 的 info.json 已成功保存")


def save_mylar_info_to_file(json_input):
    info_json = generate_mylar_info(json_input)
    # 保存到文件 series.json
    with open('series.json', 'w', encoding='utf-8') as f:
        f.write(json.dumps(info_json, ensure_ascii=False))
    # 输出提示
    print(f"系列 {json_input['id']} 的 series.json 已成功保存")

# TODO: 这压缩包上哪儿去操作啊? 且不说权限, Komga给的目录搞不好是个容器卷根本访问不到, 难道要用户为每个 library 写一个目录地址?


def send_comic_or_eze_to_zip(jsonfile, destinationZip):
    """把ComicInfo.xml或info.json置入对应的书籍压缩包中"""
    pass

# TODO: 这目录上哪儿去获取啊? 且不说权限, Komga给的目录搞不好是个容器卷根本访问不到, 难道要用户为每个 library 写一个目录地址?


def send_mylar_to_directory(jsonfile, destinationDirctory):
    """把ComicInfo.xml或info.json置入对应的系列目录中"""
    pass


if __name__ == '__main__':

    env = InitEnv()
    komga = env.komga
    book_json = komga.get_book_metadata("0JW1ZC34BJC62")
    save_comic_info_to_file(book_json)
    save_eze_info_to_file(book_json)
    series_json = komga.get_specific_series("0JR3CFZ42GMGT")
    save_mylar_info_to_file(series_json)
